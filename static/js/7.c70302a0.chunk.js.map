{"version":3,"sources":["components/elements/BigButton.tsx","components/elements/BigButton.module.css","components/elements/FormsControls.tsx","components/elements/FormsControls.module.css","components/Dialogs/Dialogs.module.css","redux/dialogsSelector.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/MessageItem.jsx","components/Dialogs/Message/MessageAdd.tsx","components/Dialogs/Message/MessageAddContainer.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["BigButton","value","click","disabled","className","s","button","cancel","onClick","module","exports","Element","meta","input","props","hasErr","touched","error","inputContainer","description","errorMessage","Input","Textarea","createField","placeholder","name","validators","component","validate","getDialogsData","state","dialogsPage","dialogsData","getMessages","messages","DialogItem","path","id","dialog","avatar","src","alt","to","MessageItem","message","from","mi","friend","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","messageAdd","MessageAdd","formData","addMessage","textMessage","MessageAddContainer","connect","Dialogs","dialogsElements","map","d","messagesElements","m","dialogs","style","block","dialogItems","compose","withAuthRedirect"],"mappings":"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","file":"static/js/7.c70302a0.chunk.js","sourcesContent":["import React from 'react'\nimport s from './BigButton.module.css'\n\ntype PropsType = {\n\tvalue: string\n\tdisabled?: boolean\n\n\tclick?: () => void\n}\n\nconst BigButton: React.FC<PropsType> = ({ value, click, disabled }) => {\n\treturn (\n\t\t<div>\n\t\t\t<button className={s.button + ' ' + (value === 'Cancel' ? s.cancel : '')} onClick={click} disabled={disabled}>\n\t\t\t\t{value}\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default BigButton\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"BigButton_button__17-al\",\"cancel\":\"BigButton_cancel__1eqgI\"};","import React from 'react'\nimport { Field, WrappedFieldMetaProps } from 'redux-form'\nimport { FieldValidatorsType } from '../../utils/validators'\nimport s from './FormsControls.module.css'\n\ntype FormControlPropsType = {\n\tmeta: WrappedFieldMetaProps\n\tdescription?: string\n\tinput: any\n\tchildren?: React.ReactNode\n}\n\nconst Element =\n\t(Element: string): React.FC<FormControlPropsType> =>\n\t({ meta, input, ...props }) => {\n\t\tconst hasErr = meta.touched && meta.error\n\t\treturn (\n\t\t\t<div className={s.inputContainer + ' ' + (hasErr ? s.error : '')}>\n\t\t\t\t<Element {...input} {...props} className={s.input} />\n\t\t\t\t{props.description ? <span className={s.description}>{props.description}</span> : ''}\n\t\t\t\t{hasErr && <div className={s.errorMessage}>{meta.error}</div>}\n\t\t\t</div>\n\t\t)\n\t}\n\nexport const Input = Element('input')\n\nexport const Textarea = Element('textarea')\n\nexport function createField<FormKeysType extends string>(\n\tplaceholder: string | undefined,\n\tname: FormKeysType,\n\tvalidators: Array<FieldValidatorsType>,\n\tcomponent: React.FC<FormControlPropsType>,\n\tdescription = '',\n\tprops = {}\n) {\n\treturn (\n\t\t<div>\n\t\t\t<Field\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tname={name}\n\t\t\t\tvalidate={validators}\n\t\t\t\tcomponent={component}\n\t\t\t\t{...props}\n\t\t\t\tdescription={description}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default Element\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"FormsControls_inputContainer__2Ovpx\",\"input\":\"FormsControls_input__1i9a4\",\"error\":\"FormsControls_error__3oS1U\",\"errorMessage\":\"FormsControls_errorMessage__1xBnB\",\"description\":\"FormsControls_description__2znvV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogItems\":\"Dialogs_dialogItems__3flRc\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"mi\":\"Dialogs_mi__QvIS0\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"avatar\":\"Dialogs_avatar__1hg1l\",\"messageAdd\":\"Dialogs_messageAdd__1Zkw-\"};","import { AppStateType } from './ReduxStore'\n\nexport const getDialogsData = (state: AppStateType) => {\n\treturn state.dialogsPage.dialogsData\n}\n\nexport const getMessages = (state: AppStateType) => {\n\treturn state.dialogsPage.messages\n}\n","import React from 'react'\nimport s from './../Dialogs.module.css'\nimport { NavLink } from 'react-router-dom'\n\ntype PropsType = {\n\tid: number\n\tavatar: string\n\tname: string\n}\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n\tlet path = '/dialogs/' + props.id\n\treturn (\n\t\t<div className={s.dialog}>\n\t\t\t<div className={s.avatar}>\n\t\t\t\t<img src={props.avatar} alt='avatar'></img>\n\t\t\t</div>\n\t\t\t<NavLink to={path}>{props.name}</NavLink>\n\t\t</div>\n\t)\n}\n\nexport default DialogItem\n","import React from 'react';\nimport s from './../Dialogs.module.css'\n\nconst MessageItem = (props) => {\n\treturn (\n\t\t<div className={s.message + ' ' + ((props.from === 'mi') ? s.mi : s.friend)}>\n\t\t\t{props.message}\n\t\t</div>\n\t)\n}\n\nexport default MessageItem;","import React from 'react'\nimport BigButton from '../../elements/BigButton'\nimport s from './../Dialogs.module.css'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport { createField, Textarea } from '../../elements/FormsControls'\n\ntype NewMessageFormValuesType = {\n\ttextMessage: string\n}\ntype PropsType = {}\n\ntype NewMessageFormValuesTypeKeys = keyof NewMessageFormValuesType\n\nconst MessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\n\treturn (\n\t\t<form onSubmit={props.handleSubmit} className={s.messageAdd}>\n\t\t\t{createField<NewMessageFormValuesTypeKeys>('', 'textMessage', [], Textarea)}\n\t\t\t<BigButton value='Sent' />\n\t\t</form>\n\t)\n}\n\nconst MessageReduxForm = reduxForm<NewMessageFormValuesType, PropsType>({\n\tform: 'DialogMessage',\n})(MessageForm)\n\ntype MapDispatchToProps = {\n\taddMessage: (message: string) => void\n}\nconst MessageAdd: React.FC<MapDispatchToProps> = (props) => {\n\tlet onSubmit = (formData: NewMessageFormValuesType) => {\n\t\tprops.addMessage(formData.textMessage)\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<MessageReduxForm onSubmit={onSubmit} />\n\t\t</div>\n\t)\n}\n\nexport default MessageAdd\n","import { addMessage } from '../../../redux/DialogsReducer'\nimport MessageAdd from './MessageAdd'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../../redux/ReduxStore'\n\nconst mapStateToProps = (state: AppStateType) => {\n\treturn {\n\t\tdialogsData: state.dialogsPage,\n\t}\n}\n\nconst MessageAddContainer = connect(mapStateToProps, { addMessage })(MessageAdd)\n\nexport default MessageAddContainer\n","import React from 'react'\nimport s from './Dialogs.module.css'\nimport style from '../../Style.module.css'\nimport DialogItem from './DialogItem/DialogItem'\nimport MessageItem from './Message/MessageItem'\nimport MessageAddContainer from './Message/MessageAddContainer'\nimport { InitialStateType } from '../../redux/DialogsReducer'\n\ntype PropsType = InitialStateType\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n\tlet dialogsElements = props.dialogsData.map((d) => (\n\t\t<DialogItem name={d.name} id={d.id} key={d.id} avatar={d.avatar} />\n\t))\n\tlet messagesElements = props.messages.map((m) => <MessageItem message={m.message} from={m.from} key={m.id} />)\n\treturn (\n\t\t<div className={s.dialogs + ' ' + style.block}>\n\t\t\t<div className={s.dialogItems}>{dialogsElements}</div>\n\t\t\t<div className={s.messages}>\n\t\t\t\t{messagesElements}\n\t\t\t\t<MessageAddContainer />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Dialogs\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\nimport { getDialogsData, getMessages } from '../../redux/dialogsSelector'\nimport { AppStateType } from '../../redux/ReduxStore'\nimport Dialogs from './Dialogs'\n\nconst mapStateToProps = (state: AppStateType) => {\n\treturn {\n\t\tdialogsData: getDialogsData(state),\n\t\tmessages: getMessages(state),\n\t}\n}\n\nexport default compose<React.ComponentType>(connect(mapStateToProps, {}), withAuthRedirect)(Dialogs)\n"],"sourceRoot":""}