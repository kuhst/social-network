{"version":3,"sources":["utils/validators.ts","components/Login/Login.module.css","components/Login/Login.tsx"],"names":["required","value","undefined","maxLength","max","length","module","exports","Input","Element","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaURL","onSubmit","className","s","inputBlock","createField","type","style","errorSubmitForm","captcha","console","log","src","alt","sendBlock","Login","formData","props","logIn","email","password","rememberMe","componentDidMount","document","body","overflow","componentWillUnmount","pageClose","render","isAuth","to","loginBackground","block","container","blockName","React","Component","connect","state","getIsAuth","getCaptchaURL"],"mappings":"wGAEA,oEAAO,IAAMA,EAAgC,SAACC,GAAD,OAAYA,OAAQC,EAAY,YAEhEC,EAAY,SAACC,GAAD,OAAsC,SAACH,GAAD,OAAWA,EAAMI,OAASD,OAAMF,EAArB,kBAA4CE,EAA5C,0B,oBCH1EE,EAAOC,QAAU,CAAC,gBAAkB,+BAA+B,UAAY,yBAAyB,WAAa,0BAA0B,UAAY,2B,iMCYrJC,EAAQC,YAAQ,SAgDhBC,EAAiBC,YAAkD,CACxEC,KAAM,SADgBD,EAtBoF,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAClI,OACC,uBAAMC,SAAUH,EAAcI,UAAWC,IAAEC,WAA3C,UACEC,YAAqC,QAAS,QAAS,CAACpB,KAAWQ,GACnEY,YAAqC,WAAY,WAAY,CAACpB,KAAWQ,EAAO,GAAI,CAAEa,KAAM,aAC5FP,GAAS,qBAAKG,UAAWK,IAAMC,gBAAtB,SAAwCT,IACjDC,GAAc,qCACd,sBAAKE,UAAWC,IAAEM,QAAlB,UACEC,QAAQC,IAAIX,GACb,qBAAKY,IAAKZ,EAAYa,IAAI,eAG1BR,YAAqC,6BAA8B,UAAW,CAACpB,KAAWQ,MAE5F,sBAAKS,UAAWC,IAAEW,UAAlB,UACET,iBAAqClB,EAAW,aAAc,GAAIM,EAAO,cAAe,CAAEa,KAAM,aACjG,cAAC,IAAD,CAAWpB,MAAM,qBAWf6B,E,4MACLd,SAAW,SAACe,GACX,EAAKC,MAAMC,MAAMF,EAASG,MAAOH,EAASI,SAAUJ,EAASK,WAAYL,EAASP,U,EAGnFa,kBAAoB,WACnBC,SAASC,KAAKjB,MAAMkB,SAAW,U,EAIhCC,qBAAuB,WACtBH,SAASC,KAAKjB,MAAMkB,SAAW,S,EAGhCE,UAAY,WACXjB,QAAQC,IAAI,a,EAGbiB,OAAS,WAER,OAAI,EAAKX,MAAMY,OAAe,cAAC,IAAD,CAAUC,GAAI,aAE3C,qBAAK5B,UAAWC,IAAE4B,gBAAlB,SACC,sBAAK7B,UAAWK,IAAMyB,MAAQ,IAAM7B,IAAE8B,UAAtC,UACC,qBAAK/B,UAAWK,IAAM2B,UAAtB,qBACA,cAACvC,EAAD,CAAgBM,SAAU,EAAKA,SAAUD,WAAY,EAAKiB,MAAMjB,mB,YAzBjDmC,IAAMC,WAqCXC,uBALS,SAACC,GAAD,MAA+C,CACtET,OAAQU,YAAUD,GAClBtC,WAAYwC,YAAcF,MAGa,CAAEpB,WAA3BmB,CAAoCtB","file":"static/js/4.91b1882c.chunk.js","sourcesContent":["export type FieldValidatorsType = (value: string) => string | undefined\n\nexport const required: FieldValidatorsType = (value) => (value ? undefined : 'Required');\n\nexport const maxLength = (max: number): FieldValidatorsType => (value) => value.length < max ? undefined : `Must be ${max} characters or less`;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBackground\":\"Login_loginBackground__xWwDv\",\"container\":\"Login_container__1Oz4Y\",\"inputBlock\":\"Login_inputBlock__yXpQx\",\"sendBlock\":\"Login_sendBlock__26_MS\"};","import React from 'react'\nimport BigButton from '../elements/BigButton'\nimport s from './Login.module.css'\nimport style from '../../Style.module.css'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport { connect } from 'react-redux'\nimport { logIn } from '../../redux/AuthReducer'\nimport Element, { createField } from '../elements/FormsControls'\nimport { required } from '../../utils/validators'\nimport { Redirect } from 'react-router-dom'\nimport { getCaptchaURL, getIsAuth } from '../../redux/authSelector'\nimport { AppStateType } from '../../redux/ReduxStore'\n\nconst Input = Element('input');\n\ntype LoginFormOunProps = {\n\tcaptchaURL: string | null\n}\n\ntype MapStateToPropsType = {\n\tcaptchaURL: string | null\n\tisAuth: boolean\n}\n\ntype MapDispatchToProps = {\n\tlogIn: (email: string, password: string, rememberMe: boolean, captchaCode: string) => void\n}\n\ntype LoginType = MapStateToPropsType & MapDispatchToProps\n\ntype LoginFormValuesType = {\n\temail: string\n\tpassword: string\n\trememberMe: boolean\n\tcaptcha: string\n}\n\ntype LoginFormValuesTypeKeys = keyof LoginFormValuesType\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOunProps> & LoginFormOunProps> = ({ handleSubmit, error, captchaURL }) => {\n\treturn (\n\t\t<form onSubmit={handleSubmit} className={s.inputBlock}>\n\t\t\t{createField<LoginFormValuesTypeKeys>('eMail', 'email', [required], Input)}\n\t\t\t{createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, '', { type: 'password' })}\n\t\t\t{error && <div className={style.errorSubmitForm}>{error}</div>}\n\t\t\t{captchaURL && <>\n\t\t\t\t<div className={s.captcha}>\n\t\t\t\t\t{console.log(captchaURL)}\n\t\t\t\t\t<img src={captchaURL} alt='captcha'></img>\n\t\t\t\t</div>\n\n\t\t\t\t{createField<LoginFormValuesTypeKeys>('Wrote symbols what you see', 'captcha', [required], Input)}\n\t\t\t</>}\n\t\t\t<div className={s.sendBlock}>\n\t\t\t\t{createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, 'Remember me', { type: 'checkbox' })}\n\t\t\t\t<BigButton value='Sign in' />\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOunProps>({\n\tform: 'login'\n})(LoginForm)\n\n\nclass Login extends React.Component<LoginType> {\n\tonSubmit = (formData: LoginFormValuesType) => {\n\t\tthis.props.logIn(formData.email, formData.password, formData.rememberMe, formData.captcha);\n\t}\n\n\tcomponentDidMount = () => {\n\t\tdocument.body.style.overflow = 'hidden';\n\t}\n\n\n\tcomponentWillUnmount = () => {\n\t\tdocument.body.style.overflow = 'unset';\n\t}\n\n\tpageClose = () => {\n\t\tconsole.log('redirect')\n\t}\n\n\trender = () => {\n\n\t\tif (this.props.isAuth) return <Redirect to={'/profile'} />\n\t\treturn (\n\t\t\t<div className={s.loginBackground}>\n\t\t\t\t<div className={style.block + ' ' + s.container}>\n\t\t\t\t\t<div className={style.blockName}>Sign in</div>\n\t\t\t\t\t<LoginReduxForm onSubmit={this.onSubmit} captchaURL={this.props.captchaURL} />\n\t\t\t\t</div>\n\t\t\t</div >\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n\tisAuth: getIsAuth(state),\n\tcaptchaURL: getCaptchaURL(state)\n})\n\nexport default connect(mapStateToProps, { logIn })(Login);"],"sourceRoot":""}