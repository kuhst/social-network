{"version":3,"sources":["utils/validators.ts","components/Login/Login.module.css","components/Login/Login.tsx"],"names":["required","value","undefined","maxLength","max","length","module","exports","Input","Element","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaURL","onSubmit","className","s","inputBlock","createField","type","style","errorSubmitForm","captcha","src","alt","sendBlock","Login","formData","props","logIn","email","password","rememberMe","componentDidMount","document","body","overflow","componentWillUnmount","pageClose","render","isAuth","to","loginBackground","block","container","blockName","React","Component","connect","state","getIsAuth","getCaptchaURL"],"mappings":"wGAEA,oEAAO,IAAMA,EAAgC,SAACC,GAAD,OAAYA,OAAQC,EAAY,YAEhEC,EAAY,SAACC,GAAD,OAAsC,SAACH,GAAD,OAAWA,EAAMI,OAASD,OAAMF,EAArB,kBAA4CE,EAA5C,0B,oBCH1EE,EAAOC,QAAU,CAAC,gBAAkB,+BAA+B,UAAY,yBAAyB,WAAa,0BAA0B,UAAY,2B,iMCYrJC,EAAQC,YAAQ,SAgFhBC,EAAiBC,YAAkD,CACvEC,KAAM,SADeD,EA/CnB,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC1B,OACE,uBAAMC,SAAUH,EAAcI,UAAWC,IAAEC,WAA3C,UACGC,YACC,QACA,QACA,CAACpB,KACDQ,GAEDY,YACC,WACA,WACA,CAACpB,KACDQ,EACA,GACA,CAAEa,KAAM,aAETP,GAAS,qBAAKG,UAAWK,IAAMC,gBAAtB,SAAwCT,IACjDC,GACC,qCACE,qBAAKE,UAAWC,IAAEM,QAAlB,SACE,qBAAKC,IAAKV,EAAYW,IAAI,cAG3BN,YACC,6BACA,UACA,CAACpB,KACDQ,MAIN,sBAAKS,UAAWC,IAAES,UAAlB,UACGP,iBACClB,EACA,aACA,GACAM,EACA,cACA,CAAEa,KAAM,aAEV,cAAC,IAAD,CAAWpB,MAAM,qBAUnB2B,E,4MACJZ,SAAW,SAACa,GACV,EAAKC,MAAMC,MACTF,EAASG,MACTH,EAASI,SACTJ,EAASK,WACTL,EAASL,U,EAIbW,kBAAoB,WAClBC,SAASC,KAAKf,MAAMgB,SAAW,U,EAGjCC,qBAAuB,WACrBH,SAASC,KAAKf,MAAMgB,SAAW,S,EAGjCE,UAAY,a,EAIZC,OAAS,WACP,OAAI,EAAKX,MAAMY,OAAe,cAAC,IAAD,CAAUC,GAAI,aAE1C,qBAAK1B,UAAWC,IAAE0B,gBAAlB,SACE,sBAAK3B,UAAWK,IAAMuB,MAAQ,IAAM3B,IAAE4B,UAAtC,UACE,qBAAK7B,UAAWK,IAAMyB,UAAtB,qBACA,cAACrC,EAAD,CACEM,SAAU,EAAKA,SACfD,WAAY,EAAKe,MAAMf,mB,YA9BfiC,IAAMC,WA2CXC,uBALS,SAACC,GAAD,MAA+C,CACrET,OAAQU,YAAUD,GAClBpC,WAAYsC,YAAcF,MAGY,CAAEpB,WAA3BmB,CAAoCtB","file":"static/js/5.98c1993a.chunk.js","sourcesContent":["export type FieldValidatorsType = (value: string) => string | undefined\n\nexport const required: FieldValidatorsType = (value) => (value ? undefined : 'Required');\n\nexport const maxLength = (max: number): FieldValidatorsType => (value) => value.length < max ? undefined : `Must be ${max} characters or less`;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBackground\":\"Login_loginBackground__xWwDv\",\"container\":\"Login_container__1Oz4Y\",\"inputBlock\":\"Login_inputBlock__yXpQx\",\"sendBlock\":\"Login_sendBlock__26_MS\"};","import React from \"react\";\nimport BigButton from \"../elements/BigButton\";\nimport s from \"./Login.module.css\";\nimport style from \"../../Style.module.css\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { logIn } from \"../../redux/AuthReducer\";\nimport Element, { createField } from \"../elements/FormsControls\";\nimport { required } from \"../../utils/validators\";\nimport { Redirect } from \"react-router-dom\";\nimport { getCaptchaURL, getIsAuth } from \"../../redux/authSelector\";\nimport { AppStateType } from \"../../redux/ReduxStore\";\n\nconst Input = Element(\"input\");\n\ntype LoginFormOunProps = {\n  captchaURL: string | null;\n};\n\ntype MapStateToPropsType = {\n  captchaURL: string | null;\n  isAuth: boolean;\n};\n\ntype MapDispatchToProps = {\n  logIn: (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captchaCode: string\n  ) => void;\n};\n\ntype LoginType = MapStateToPropsType & MapDispatchToProps;\n\ntype LoginFormValuesType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha: string;\n};\n\ntype LoginFormValuesTypeKeys = keyof LoginFormValuesType;\n\nconst LoginForm: React.FC<\n  InjectedFormProps<LoginFormValuesType, LoginFormOunProps> & LoginFormOunProps\n> = ({ handleSubmit, error, captchaURL }) => {\n  return (\n    <form onSubmit={handleSubmit} className={s.inputBlock}>\n      {createField<LoginFormValuesTypeKeys>(\n        \"eMail\",\n        \"email\",\n        [required],\n        Input\n      )}\n      {createField<LoginFormValuesTypeKeys>(\n        \"Password\",\n        \"password\",\n        [required],\n        Input,\n        \"\",\n        { type: \"password\" }\n      )}\n      {error && <div className={style.errorSubmitForm}>{error}</div>}\n      {captchaURL && (\n        <>\n          <div className={s.captcha}>\n            <img src={captchaURL} alt='captcha'></img>\n          </div>\n\n          {createField<LoginFormValuesTypeKeys>(\n            \"Wrote symbols what you see\",\n            \"captcha\",\n            [required],\n            Input\n          )}\n        </>\n      )}\n      <div className={s.sendBlock}>\n        {createField<LoginFormValuesTypeKeys>(\n          undefined,\n          \"rememberMe\",\n          [],\n          Input,\n          \"Remember me\",\n          { type: \"checkbox\" }\n        )}\n        <BigButton value='Sign in' />\n      </div>\n    </form>\n  );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOunProps>({\n  form: \"login\",\n})(LoginForm);\n\nclass Login extends React.Component<LoginType> {\n  onSubmit = (formData: LoginFormValuesType) => {\n    this.props.logIn(\n      formData.email,\n      formData.password,\n      formData.rememberMe,\n      formData.captcha\n    );\n  };\n\n  componentDidMount = () => {\n    document.body.style.overflow = \"hidden\";\n  };\n\n  componentWillUnmount = () => {\n    document.body.style.overflow = \"unset\";\n  };\n\n  pageClose = () => {\n    // console.log(\"redirect\");\n  };\n\n  render = () => {\n    if (this.props.isAuth) return <Redirect to={\"/profile\"} />;\n    return (\n      <div className={s.loginBackground}>\n        <div className={style.block + \" \" + s.container}>\n          <div className={style.blockName}>Sign in</div>\n          <LoginReduxForm\n            onSubmit={this.onSubmit}\n            captchaURL={this.props.captchaURL}\n          />\n        </div>\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n  isAuth: getIsAuth(state),\n  captchaURL: getCaptchaURL(state),\n});\n\nexport default connect(mapStateToProps, { logIn })(Login);\n"],"sourceRoot":""}