{"version":3,"sources":["components/Users/Users.module.css","assets/images/user.png","components/Users/User.tsx","redux/usersSelector.ts","components/Users/UsersSearchForm.tsx","components/Users/UsersPage.tsx"],"names":["module","exports","User","user","follow","unfollow","followingInProgress","className","style","block","s","to","id","userPhoto","src","photos","large","alt","Avatar","container","userName","name","status","button","followed","BigButton","disabled","some","userId","value","click","getUsers","state","usersPage","users","getUsersCount","usersCount","getUsersCountOnPage","usersCountOnPage","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","getUserFilter","filter","usersSearchFormValidate","UsersSearchForm","React","memo","onFilterChanged","useSelector","usersSearch","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","values","setSubmitting","isSubmitting","padding","paddingRight","size","type","placeholder","width","borderRight","borderTopLeftRadius","borderBottomLeftRadius","paddingLeft","Group","defaultValue","buttonStyle","UsersPage","props","dispatch","useDispatch","history","useHistory","querystring","require","useEffect","parsed","parse","location","search","substr","actualPage","actualFilter","page","console","log","responseUsers","query","push","pathname","stringify","followUser","unfollowUser","usersItems","map","u","pages","current","total","onChange","pageNumber","pageSize","pageSizeOptions","marginTop","marginBottom","textAlign"],"mappings":"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","file":"static/js/7.d6957827.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Users_pages__2ZPtK\",\"usersPage\":\"Users_usersPage__3xdAn\",\"block\":\"Users_block__1re8X\",\"userPhoto\":\"Users_userPhoto__17MJB\",\"container\":\"Users_container__6F9oG\",\"user\":\"Users_user__1dQYj\",\"userName\":\"Users_userName__1mt5V\",\"status\":\"Users_status__E0SMG\",\"button\":\"Users_button__1saaY\"};","export default __webpack_public_path__ + \"static/media/user.03b91692.png\";","import React from \"react\";\nimport BigButton from \"../elements/BigButton\";\nimport s from \"./Users.module.css\";\nimport style from \"../../Style.module.css\";\nimport userPhoto from \"../../assets/images/user.png\";\nimport { NavLink } from \"react-router-dom\";\nimport { UserType } from \"../../type/type\";\n\ntype PropsType = {\n  user: UserType;\n  followingInProgress: Array<number>;\n\n  follow: (userId: number) => void;\n  unfollow: (userId: number) => void;\n};\n\nconst User: React.FC<PropsType> = ({\n  user,\n  follow,\n  unfollow,\n  followingInProgress,\n}) => {\n  return (\n    <div className={style.block + \" \" + s.block}>\n      <NavLink to={`/profile/` + user.id}>\n        <div className={s.userPhoto}>\n          <img\n            src={user.photos.large ? user.photos.large : userPhoto}\n            alt={s.Avatar}\n          ></img>\n        </div>\n      </NavLink>\n      <div className={s.container}>\n        <div className={s.user}>\n          <div className={s.userName}>{user.name}</div>\n          {user.status ? (\n            <div className={s.status}>\n              <span>{user.status}</span>\n            </div>\n          ) : (\n            <></>\n          )}\n        </div>\n        <div className={s.button}>\n          {user.followed ? (\n            <BigButton\n              disabled={followingInProgress.some(\n                (userId) => userId === user.id\n              )}\n              value='unfollow'\n              click={() => {\n                unfollow(user.id);\n              }}\n            />\n          ) : (\n            <BigButton\n              disabled={followingInProgress.some(\n                (userId) => userId === user.id\n              )}\n              value='follow'\n              click={() => {\n                follow(user.id);\n              }}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default User;\n","import { AppStateType } from \"./ReduxStore\";\n\nexport const getUsers = (state: AppStateType) => {\n\treturn state.usersPage.users;\n}\n\nexport const getUsersCount = (state: AppStateType) => {\n\treturn state.usersPage.usersCount;\n}\n\nexport const getUsersCountOnPage = (state: AppStateType) => {\n\treturn state.usersPage.usersCountOnPage;\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n\treturn state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n\treturn state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n\treturn state.usersPage.followingInProgress;\n}\n\nexport const getUserFilter = (state: AppStateType) => {\n\treturn state.usersPage.filter;\n}","import React from \"react\";\nimport s from \"./Users.module.css\";\nimport { Form, Formik } from \"formik\";\nimport { FilterType } from \"../../redux/UsersReducer\";\nimport { useSelector } from \"react-redux\";\nimport { getUserFilter } from \"../../redux/usersSelector\";\nimport { Input, Radio, SubmitButton } from \"formik-antd\";\nimport { Space } from \"antd\";\nimport style from \"../../Style.module.css\";\n\nconst usersSearchFormValidate = () => {\n  const errors = {};\n  return errors;\n};\n\ntype PropsType = {\n  onFilterChanged: (filter: FilterType) => void;\n  isFetching: boolean;\n};\n\ntype FriendFormType = \"true\" | \"false\" | \"null\";\ntype FormType = {\n  term: string;\n  friend: FriendFormType;\n};\n\nconst UsersSearchForm: React.FC<PropsType> = React.memo(\n  ({ onFilterChanged, isFetching }) => {\n    const submit = (\n      values: { term: string; friend: string },\n      { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\n    ) => {\n      onFilterChanged({\n        term: values.term,\n        friend:\n          values.friend === \"null\"\n            ? null\n            : values.friend === \"true\"\n            ? true\n            : false,\n      });\n      setSubmitting(false);\n    };\n\n    const filter = useSelector(getUserFilter);\n\n    return (\n      <div className={s.usersSearch}>\n        <Formik\n          enableReinitialize\n          initialValues={{\n            term: filter.term,\n            friend: String(filter.friend) as FriendFormType,\n          }}\n          validate={usersSearchFormValidate}\n          onSubmit={submit}\n        >\n          {({ isSubmitting }) => (\n            <Form\n              className={style.block}\n              style={{\n                padding: 20,\n                paddingRight: 30,\n              }}\n            >\n              <Space>\n                <Space size={0}>\n                  <Input\n                    name='term'\n                    type='search'\n                    placeholder='Search user'\n                    style={{ width: 320, borderRight: 0 }}\n                  />\n                  <SubmitButton\n                    style={{\n                      borderTopLeftRadius: 0,\n                      borderBottomLeftRadius: 0,\n                    }}\n                    disabled={isFetching}\n                  >\n                    Search\n                  </SubmitButton>\n                </Space>\n                <Space\n                  style={{\n                    paddingLeft: 20,\n                  }}\n                >\n                  <Radio.Group\n                    name='friend'\n                    defaultValue='null'\n                    buttonStyle='solid'\n                    size='small'\n                  >\n                    <Radio name='friend' value='null'>\n                      All\n                    </Radio>\n                    <Radio name='friend' value='true'>\n                      Only followed\n                    </Radio>\n                    <Radio name='friend' value='false'>\n                      Only unfollowed\n                    </Radio>\n                  </Radio.Group>\n                </Space>\n              </Space>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    );\n  }\n);\n\nexport default UsersSearchForm;\n","import React, { useEffect } from \"react\";\n\nimport s from \"./Users.module.css\";\nimport User from \"./User\";\nimport Paginator from \"../elements/Paginator\";\nimport UsersSearchForm from \"./UsersSearchForm\";\nimport {\n  FilterType,\n  follow,\n  responseUsers,\n  unfollow,\n} from \"../../redux/UsersReducer\";\nimport {\n  getCurrentPage,\n  getFollowingInProgress,\n  getIsFetching,\n  getUserFilter,\n  getUsers,\n  getUsersCount,\n  getUsersCountOnPage,\n} from \"../../redux/usersSelector\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Pagination, Spin } from \"antd\";\n\ntype PropsType = {};\n\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\n\nconst UsersPage: React.FC<PropsType> = React.memo((props) => {\n  const users = useSelector(getUsers);\n  const usersCount = useSelector(getUsersCount);\n  const usersCountOnPage = useSelector(getUsersCountOnPage);\n  const currentPage = useSelector(getCurrentPage);\n  const followingInProgress = useSelector(getFollowingInProgress);\n  const filter = useSelector(getUserFilter);\n  const isFetching = useSelector(getIsFetching);\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const querystring = require(\"querystring\");\n\n  useEffect(() => {\n    const parsed = querystring.parse(\n      history.location.search.substr(1)\n    ) as QueryParamsType;\n\n    let actualPage = currentPage;\n    let actualFilter = filter;\n    if (parsed.page) actualPage = +parsed.page;\n    if (parsed.term) actualFilter = { ...actualFilter, term: parsed.term };\n    if (parsed.friend)\n      actualFilter = {\n        ...actualFilter,\n        friend:\n          parsed.friend === \"null\"\n            ? null\n            : parsed.friend === \"true\"\n            ? true\n            : false,\n      };\n\n    console.log(parsed);\n    dispatch(responseUsers(usersCountOnPage, actualPage, actualFilter));\n  }, []);\n\n  useEffect(() => {\n    const query: QueryParamsType = {};\n\n    if (filter.term) query.term = filter.term;\n    if (filter.friend !== null) query.friend = String(filter.friend);\n    if (currentPage !== 1) query.page = String(currentPage);\n\n    history.push({\n      pathname: \"/users\",\n      search: querystring.stringify(query),\n    });\n  }, [filter, currentPage]);\n\n  const onPageChanged = (pageNumber: number, pageSize?: number) => {\n    dispatch(responseUsers(pageSize || usersCountOnPage, pageNumber, filter));\n  };\n\n  const onFilterChanged = (filter: FilterType) => {\n    dispatch(responseUsers(usersCountOnPage, 1, filter));\n  };\n\n  const followUser = (userId: number) => {\n    dispatch(follow(userId));\n  };\n\n  const unfollowUser = (userId: number) => {\n    dispatch(unfollow(userId));\n  };\n\n  let usersItems = users.map((u) => (\n    <User\n      key={u.id}\n      user={u}\n      followingInProgress={followingInProgress}\n      unfollow={unfollowUser}\n      follow={followUser}\n    />\n  ));\n\n  return (\n    <div>\n      <UsersSearchForm\n        isFetching={isFetching}\n        onFilterChanged={onFilterChanged}\n      />\n      <div className={s.pages}>\n        <Pagination\n          current={currentPage}\n          total={usersCount}\n          onChange={onPageChanged}\n          pageSize={usersCountOnPage}\n          pageSizeOptions={[\"12\", \"24\", \"48\"]}\n          disabled={isFetching}\n          style={{ marginTop: 15, marginBottom: 15 }}\n        />\n      </div>\n      {isFetching ? (\n        <div style={{ textAlign: \"center\" }}>\n          <Spin />\n        </div>\n      ) : (\n        <div className={s.usersPage}>{usersItems}</div>\n      )}\n    </div>\n  );\n});\n\nexport default UsersPage;\n"],"sourceRoot":""}