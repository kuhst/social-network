{"version":3,"sources":["redux/chatSelector.ts","components/Chat/ChatPage.tsx"],"names":["getStatus","state","chat","status","ChatMessages","messages","useSelector","console","log","id","style","height","overflow","display","flexDirection","dataLength","length","next","hasMore","loader","scrollableTarget","itemLayout","margin","dataSource","renderItem","item","Item","Meta","avatar","src","photo","title","to","userId","userName","description","message","AddChatMessage","dispatch","useDispatch","padding","paddingTop","initialValues","textMessage","onSubmit","values","sendMessage","TextArea","name","showCount","maxLength","allowClear","autoSize","minRows","maxRows","loading","disabled","marginTop","ChatPage","useEffect","startMessagesListening","stopMessagesListening","spinning","size","className","block"],"mappings":"6OAEaA,EAAY,SAACC,GACzB,OAAOA,EAAMC,KAAKC,Q,OCmCbC,EAAyB,WAC3B,IAAMC,EAAWC,aAAY,SAACL,GAAD,OAAyBA,EAAMC,KAAKG,YAEjE,OADAE,QAAQC,IAAI,gBAER,qBACIC,GAAG,gBACHC,MAAO,CACHC,OAAQ,IACRC,SAAU,OACVC,QAAS,OACTC,cAAe,kBANvB,SASI,cAAC,IAAD,CACIC,WAAYV,EAASW,OACrBC,KAAM,aACNC,SAAS,EACTC,OAAQ,4CACRC,iBAAiB,gBALrB,SAOI,cAAC,IAAD,CACIC,WAAW,aACXX,MAAO,CAAEY,OAAQ,UACjBC,WAAYlB,EACZmB,WAAY,SAACC,GAAD,OACR,cAAC,IAAKC,KAAN,UACI,cAAC,IAAKA,KAAKC,KAAX,CACIC,OAAQ,cAAC,IAAD,CAAQC,IAAKJ,EAAKK,QAC1BC,MACI,cAAC,IAAD,CAASC,GAAI,YAAcP,EAAKQ,OAAhC,SACKR,EAAKS,WAGdC,YAAaV,EAAKW,oBAU5CC,EAAoD,SAAC,GAAgB,IAAdlC,EAAa,EAAbA,OACnDmC,EAAWC,cAEjB,OACI,qBAAK7B,MAAO,CAAE8B,QAAS,GAAIC,WAAY,GAAvC,SACI,cAAC,IAAD,CACIC,cAAe,CACXC,YAAa,IAEjBC,SAAU,SAACC,GACPP,EAASQ,YAAYD,EAAOF,eALpC,SAQI,eAAC,IAAD,WACI,cAAC,IAAMI,SAAP,CACIC,KAAK,cACLC,WAAS,EACTC,UAAW,IACXC,YAAU,EACVC,SAAU,CAAEC,QAAS,EAAGC,QAAS,KAErC,cAAC,IAAD,CACIC,SAAS,EACTC,SAAqB,YAAXrD,EACVO,MAAO,CAAE+C,UAAW,IAHxB,0BAaLC,UAnGE,WACb,IAAMvD,EAASG,YAAYN,GAErBsC,EAAWC,cASjB,OAPAoB,qBAAU,WAEN,OADArB,EAASsB,eACF,WACHtB,EAASuB,kBAEd,IAGC,cAAC,IAAD,CAAMC,SAAqB,YAAX3D,EAAsB4D,KAAK,QAA3C,SACI,sBAAKC,UAAWtD,IAAMuD,MAAtB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAgB9D,OAAQA","file":"static/js/12.5fcafcc9.chunk.js","sourcesContent":["import { AppStateType } from \"./ReduxStore\";\n\nexport const getStatus = (state: AppStateType) => {\n\treturn state.chat.status;\n}\n\nexport const getChatMessages = (state: AppStateType) => {\n\treturn state.chat.messages;\n}","import React, { useEffect } from 'react'\nimport style from '../../Style.module.css'\nimport { List, Avatar, Space, Spin } from 'antd'\nimport { NavLink } from 'react-router-dom'\nimport { Formik } from 'formik'\nimport { Form, Input, SubmitButton } from 'formik-antd'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    sendMessage,\n    startMessagesListening,\n    stopMessagesListening,\n} from '../../redux/ChatReducer'\nimport { AppStateType } from '../../redux/ReduxStore'\nimport { getStatus } from '../../redux/chatSelector'\n\nconst ChatPage = () => {\n    const status = useSelector(getStatus)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [])\n\n    return (\n        <Spin spinning={status === 'pending'} size=\"large\">\n            <div className={style.block}>\n                <ChatMessages />\n                <AddChatMessage status={status} />\n            </div>\n        </Spin>\n    )\n}\n\nconst ChatMessages: React.FC = () => {\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    console.log('>>>>messages')\n    return (\n        <div\n            id=\"scrollableDiv\"\n            style={{\n                height: 300,\n                overflow: 'auto',\n                display: 'flex',\n                flexDirection: 'column-reverse',\n            }}\n        >\n            <InfiniteScroll\n                dataLength={messages.length}\n                next={() => {}}\n                hasMore={false}\n                loader={<h4>Loading...</h4>}\n                scrollableTarget=\"scrollableDiv\"\n            >\n                <List\n                    itemLayout=\"horizontal\"\n                    style={{ margin: '0 20px' }}\n                    dataSource={messages}\n                    renderItem={(item) => (\n                        <List.Item>\n                            <List.Item.Meta\n                                avatar={<Avatar src={item.photo} />}\n                                title={\n                                    <NavLink to={`/profile/` + item.userId}>\n                                        {item.userName}\n                                    </NavLink>\n                                }\n                                description={item.message}\n                            />\n                        </List.Item>\n                    )}\n                />\n            </InfiniteScroll>\n        </div>\n    )\n}\n\nconst AddChatMessage: React.FC<ChatAddMessagePropsType> = ({ status }) => {\n    const dispatch = useDispatch()\n\n    return (\n        <div style={{ padding: 20, paddingTop: 5 }}>\n            <Formik\n                initialValues={{\n                    textMessage: '',\n                }}\n                onSubmit={(values) => {\n                    dispatch(sendMessage(values.textMessage))\n                }}\n            >\n                <Form>\n                    <Input.TextArea\n                        name=\"textMessage\"\n                        showCount\n                        maxLength={100}\n                        allowClear\n                        autoSize={{ minRows: 2, maxRows: 6 }}\n                    />\n                    <SubmitButton\n                        loading={false}\n                        disabled={status === 'pending'}\n                        style={{ marginTop: 10 }}\n                    >\n                        Send\n                    </SubmitButton>\n                </Form>\n            </Formik>\n        </div>\n    )\n}\n\nexport default ChatPage\n\ntype ChatAddMessagePropsType = {\n    status: 'ready' | 'pending' | 'error'\n}\n"],"sourceRoot":""}