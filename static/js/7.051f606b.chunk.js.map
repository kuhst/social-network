{"version":3,"sources":["utils/validators.ts","components/Login/Login.module.css","components/Login/LoginPage.tsx"],"names":["required","value","undefined","maxLength","max","length","module","exports","Input","Element","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaURL","onSubmit","className","s","inputBlock","createField","type","style","errorSubmitForm","captcha","src","alt","sendBlock","LoginPage","useState","useEffect","document","body","overflow","isAuth","useSelector","getIsAuth","getCaptchaURL","dispatch","useDispatch","to","loginBackground","block","container","blockName","formData","logIn","email","password","rememberMe"],"mappings":"wGAEA,oEAAO,IAAMA,EAAgC,SAACC,GAAD,OAAYA,OAAQC,EAAY,YAEhEC,EAAY,SAACC,GAAD,OAAsC,SAACH,GAAD,OAAWA,EAAMI,OAASD,OAAMF,EAArB,kBAA4CE,EAA5C,0B,oBCH1EE,EAAOC,QAAU,CAAC,gBAAkB,+BAA+B,UAAY,yBAAyB,WAAa,0BAA0B,UAAY,2B,kNCarJC,EAAQC,YAAQ,SAiEhBC,EAAiBC,YAAkD,CACrEC,KAAM,SADaD,EA/CnB,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACxB,OACI,uBAAMC,SAAUH,EAAcI,UAAWC,IAAEC,WAA3C,UACKC,YACG,QACA,QACA,CAACpB,KACDQ,GAEHY,YACG,WACA,WACA,CAACpB,KACDQ,EACA,GACA,CAAEa,KAAM,aAEXP,GAAS,qBAAKG,UAAWK,IAAMC,gBAAtB,SAAwCT,IACjDC,GACG,qCACI,qBAAKE,UAAWC,IAAEM,QAAlB,SACI,qBAAKC,IAAKV,EAAYW,IAAI,cAG7BN,YACG,6BACA,UACA,CAACpB,KACDQ,MAIZ,sBAAKS,UAAWC,IAAES,UAAlB,UACKP,iBACGlB,EACA,aACA,GACAM,EACA,cACA,CAAEa,KAAM,aAEZ,cAAC,IAAD,CAAWpB,MAAM,qBAUpB2B,EAAY,WACrB,MAAgCC,oBAAS,GAAzC,6BAEAC,qBAAU,WAEN,OADAC,SAASC,KAAKV,MAAMW,SAAW,SACxB,WACHF,SAASC,KAAKV,MAAMW,SAAW,YAIvC,IAAMC,EAASC,YAAYC,KACrBrB,EAAaoB,YAAYE,KAEzBC,EAAWC,cAajB,OAAIL,EAAe,cAAC,IAAD,CAAUM,GAAI,aAE7B,qBAAKvB,UAAWC,IAAEuB,gBAAlB,SACI,sBAAKxB,UAAWK,IAAMoB,MAAQ,IAAMxB,IAAEyB,UAAtC,UACI,qBAAK1B,UAAWK,IAAMsB,UAAtB,qBACA,cAAClC,EAAD,CAAgBM,SAhBX,SAAC6B,GACdP,EACIQ,YACID,EAASE,MACTF,EAASG,SACTH,EAASI,WACTJ,EAASrB,WAU2BT,WAAYA","file":"static/js/7.051f606b.chunk.js","sourcesContent":["export type FieldValidatorsType = (value: string) => string | undefined\n\nexport const required: FieldValidatorsType = (value) => (value ? undefined : 'Required');\n\nexport const maxLength = (max: number): FieldValidatorsType => (value) => value.length < max ? undefined : `Must be ${max} characters or less`;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBackground\":\"Login_loginBackground__xWwDv\",\"container\":\"Login_container__1Oz4Y\",\"inputBlock\":\"Login_inputBlock__yXpQx\",\"sendBlock\":\"Login_sendBlock__26_MS\"};","import React from 'react'\nimport BigButton from '../elements/BigButton'\nimport s from './Login.module.css'\nimport style from '../../Style.module.css'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { logIn } from '../../redux/AuthReducer'\nimport Element, { createField } from '../elements/FormsControls'\nimport { required } from '../../utils/validators'\nimport { Redirect } from 'react-router-dom'\nimport { getCaptchaURL, getIsAuth } from '../../redux/authSelector'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\n\nconst Input = Element('input')\n\ntype LoginFormOunProps = {\n    captchaURL: string | null\n}\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\ntype LoginFormValuesTypeKeys = keyof LoginFormValuesType\n\nconst LoginForm: React.FC<\n    InjectedFormProps<LoginFormValuesType, LoginFormOunProps> &\n        LoginFormOunProps\n> = ({ handleSubmit, error, captchaURL }) => {\n    return (\n        <form onSubmit={handleSubmit} className={s.inputBlock}>\n            {createField<LoginFormValuesTypeKeys>(\n                'eMail',\n                'email',\n                [required],\n                Input\n            )}\n            {createField<LoginFormValuesTypeKeys>(\n                'Password',\n                'password',\n                [required],\n                Input,\n                '',\n                { type: 'password' }\n            )}\n            {error && <div className={style.errorSubmitForm}>{error}</div>}\n            {captchaURL && (\n                <>\n                    <div className={s.captcha}>\n                        <img src={captchaURL} alt=\"captcha\"></img>\n                    </div>\n\n                    {createField<LoginFormValuesTypeKeys>(\n                        'Wrote symbols what you see',\n                        'captcha',\n                        [required],\n                        Input\n                    )}\n                </>\n            )}\n            <div className={s.sendBlock}>\n                {createField<LoginFormValuesTypeKeys>(\n                    undefined,\n                    'rememberMe',\n                    [],\n                    Input,\n                    'Remember me',\n                    { type: 'checkbox' }\n                )}\n                <BigButton value=\"Sign in\" />\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOunProps>({\n    form: 'login',\n})(LoginForm)\n\nexport const LoginPage = () => {\n    const [isActive, setIsActive] = useState(true)\n\n    useEffect(() => {\n        document.body.style.overflow = 'hidden'\n        return () => {\n            document.body.style.overflow = 'unset'\n        }\n    })\n\n    const isAuth = useSelector(getIsAuth)\n    const captchaURL = useSelector(getCaptchaURL)\n\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(\n            logIn(\n                formData.email,\n                formData.password,\n                formData.rememberMe,\n                formData.captcha\n            )\n        )\n    }\n\n    if (isAuth) return <Redirect to={'/profile'} />\n    return (\n        <div className={s.loginBackground}>\n            <div className={style.block + ' ' + s.container}>\n                <div className={style.blockName}>Sign in</div>\n                <LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL} />\n            </div>\n        </div>\n    )\n}\n"],"sourceRoot":""}