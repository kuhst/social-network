{"version":3,"sources":["components/elements/BigButton.tsx","components/elements/BigButton.module.css","components/elements/FormsControls.tsx","components/elements/FormsControls.module.css","utils/validators.ts","components/Login/Login.module.css","components/Login/LoginPage.tsx"],"names":["BigButton","value","click","disabled","className","s","button","cancel","onClick","module","exports","Element","meta","input","props","hasErr","touched","error","inputContainer","description","errorMessage","Input","Textarea","createField","placeholder","name","validators","component","validate","required","undefined","maxLength","max","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaURL","onSubmit","inputBlock","type","style","errorSubmitForm","captcha","src","alt","sendBlock","LoginPage","useState","useEffect","document","body","overflow","keys","isSafari","push","safariMessage","message","duration","key","notification","open","args1","args2","args3","setTimeout","openNotification","forEach","close","isAuth","useSelector","getIsAuth","getCaptchaURL","dispatch","useDispatch","to","loginBackground","block","container","blockName","formData","logIn","email","password","rememberMe"],"mappings":"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","file":"static/js/5.7ae851a0.chunk.js","sourcesContent":["import React from 'react'\nimport s from './BigButton.module.css'\n\ntype PropsType = {\n\tvalue: string\n\tdisabled?: boolean\n\n\tclick?: () => void\n}\n\nconst BigButton: React.FC<PropsType> = ({ value, click, disabled }) => {\n\treturn (\n\t\t<div>\n\t\t\t<button className={s.button + ' ' + (value === 'Cancel' ? s.cancel : '')} onClick={click} disabled={disabled}>\n\t\t\t\t{value}\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default BigButton\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"BigButton_button__17-al\",\"cancel\":\"BigButton_cancel__1eqgI\"};","import React from 'react'\nimport { Field, WrappedFieldMetaProps } from 'redux-form'\nimport { FieldValidatorsType } from '../../utils/validators'\nimport s from './FormsControls.module.css'\n\ntype FormControlPropsType = {\n\tmeta: WrappedFieldMetaProps\n\tdescription?: string\n\tinput: any\n\tchildren?: React.ReactNode\n}\n\nconst Element =\n\t(Element: string): React.FC<FormControlPropsType> =>\n\t({ meta, input, ...props }) => {\n\t\tconst hasErr = meta.touched && meta.error\n\t\treturn (\n\t\t\t<div className={s.inputContainer + ' ' + (hasErr ? s.error : '')}>\n\t\t\t\t<Element {...input} {...props} className={s.input} />\n\t\t\t\t{props.description ? <span className={s.description}>{props.description}</span> : ''}\n\t\t\t\t{hasErr && <div className={s.errorMessage}>{meta.error}</div>}\n\t\t\t</div>\n\t\t)\n\t}\n\nexport const Input = Element('input')\n\nexport const Textarea = Element('textarea')\n\nexport function createField<FormKeysType extends string>(\n\tplaceholder: string | undefined,\n\tname: FormKeysType,\n\tvalidators: Array<FieldValidatorsType>,\n\tcomponent: React.FC<FormControlPropsType>,\n\tdescription = '',\n\tprops = {}\n) {\n\treturn (\n\t\t<div>\n\t\t\t<Field\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tname={name}\n\t\t\t\tvalidate={validators}\n\t\t\t\tcomponent={component}\n\t\t\t\t{...props}\n\t\t\t\tdescription={description}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default Element\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"FormsControls_inputContainer__2Ovpx\",\"input\":\"FormsControls_input__1i9a4\",\"error\":\"FormsControls_error__3oS1U\",\"errorMessage\":\"FormsControls_errorMessage__1xBnB\",\"description\":\"FormsControls_description__2znvV\"};","export type FieldValidatorsType = (value: string) => string | undefined\n\nexport const required: FieldValidatorsType = (value) => (value ? undefined : 'Required');\n\nexport const maxLength = (max: number): FieldValidatorsType => (value) => value.length < max ? undefined : `Must be ${max} characters or less`;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBackground\":\"Login_loginBackground__xWwDv\",\"container\":\"Login_container__1Oz4Y\",\"inputBlock\":\"Login_inputBlock__yXpQx\",\"sendBlock\":\"Login_sendBlock__26_MS\"};","import React from 'react'\nimport BigButton from '../elements/BigButton'\nimport s from './Login.module.css'\nimport style from '../../Style.module.css'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { logIn } from '../../redux/AuthReducer'\nimport Element, { createField } from '../elements/FormsControls'\nimport { required } from '../../utils/validators'\nimport { Redirect } from 'react-router-dom'\nimport { getCaptchaURL, getIsAuth } from '../../redux/authSelector'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport { notification } from 'antd'\nimport { isSafari } from 'react-device-detect'\n\nconst Input = Element('input')\n\ntype LoginFormOunProps = {\n\tcaptchaURL: string | null\n}\n\ntype LoginFormValuesType = {\n\temail: string\n\tpassword: string\n\trememberMe: boolean\n\tcaptcha: string\n}\n\ntype LoginFormValuesTypeKeys = keyof LoginFormValuesType\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOunProps> & LoginFormOunProps> = ({\n\thandleSubmit,\n\terror,\n\tcaptchaURL,\n}) => {\n\treturn (\n\t\t<form onSubmit={handleSubmit} className={s.inputBlock}>\n\t\t\t{createField<LoginFormValuesTypeKeys>('eMail', 'email', [required], Input)}\n\t\t\t{createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, '', { type: 'password' })}\n\t\t\t{error && <div className={style.errorSubmitForm}>{error}</div>}\n\t\t\t{captchaURL && (\n\t\t\t\t<>\n\t\t\t\t\t<div className={s.captcha}>\n\t\t\t\t\t\t<img src={captchaURL} alt='captcha'></img>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{createField<LoginFormValuesTypeKeys>('Wrote symbols what you see', 'captcha', [required], Input)}\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t<div className={s.sendBlock}>\n\t\t\t\t{createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, 'Remember me', {\n\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t})}\n\t\t\t\t<BigButton value='Sign in' />\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOunProps>({\n\tform: 'login',\n})(LoginForm)\n\nconst openNotification = () => {\n\tlet keys = []\n\tif (isSafari) {\n\t\tkeys.push('safari')\n\t\tconst safariMessage = {\n\t\t\tmessage: 'Warning',\n\t\t\tdescription: 'Sorry, you cant use Safari for login, please use any other browser',\n\t\t\tduration: 0,\n\t\t\tkey: keys[0],\n\t\t}\n\t\tnotification.open(safariMessage)\n\t} else {\n\t\tkeys.push('notification 1', 'notification 2', 'notification 3')\n\t\tconst args1 = {\n\t\t\tmessage: 'Authorization',\n\t\t\tdescription: 'You can use login and password bellow to view functionality',\n\t\t\tduration: 0,\n\t\t\tkey: keys[0],\n\t\t}\n\t\tconst args2 = {\n\t\t\tmessage: 'Login',\n\t\t\tdescription: 'kuh_st@me.com',\n\t\t\tduration: 0,\n\t\t\tkey: keys[1],\n\t\t}\n\t\tconst args3 = {\n\t\t\tmessage: 'Password',\n\t\t\tdescription: 'xipbic-5simxu-tUrtyh',\n\t\t\tduration: 0,\n\t\t\tkey: keys[2],\n\t\t}\n\t\tnotification.open(args1)\n\t\tsetTimeout(() => notification.open(args2), 1000)\n\t\tsetTimeout(() => notification.open(args3), 2000)\n\t}\n\treturn keys\n}\n\nexport const LoginPage = () => {\n\tconst [isActive, setIsActive] = useState(true)\n\n\tuseEffect(() => {\n\t\tdocument.body.style.overflow = 'hidden'\n\t\treturn () => {\n\t\t\tdocument.body.style.overflow = 'unset'\n\t\t}\n\t})\n\n\tuseEffect(() => {\n\t\tconst keys = openNotification()\n\t\treturn () => {\n\t\t\tkeys.forEach((key) => notification.close(key))\n\t\t}\n\t}, [])\n\n\tconst isAuth = useSelector(getIsAuth)\n\tconst captchaURL = useSelector(getCaptchaURL)\n\n\tconst dispatch = useDispatch()\n\n\tconst onSubmit = (formData: LoginFormValuesType) => {\n\t\tdispatch(logIn(formData.email, formData.password, formData.rememberMe, formData.captcha))\n\t}\n\n\tif (isAuth) return <Redirect to={'/profile'} />\n\treturn (\n\t\t<div className={s.loginBackground}>\n\t\t\t<div className={style.block + ' ' + s.container}>\n\t\t\t\t<div className={style.blockName}>Sign in</div>\n\t\t\t\t<LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL} />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"],"sourceRoot":""}