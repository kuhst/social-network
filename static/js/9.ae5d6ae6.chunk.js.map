{"version":3,"sources":["components/Chat/ChatPage.tsx"],"names":["ChatMessages","wsChannel","useState","messages","setMessages","useEffect","messageHandler","e","newMessages","JSON","parse","data","prevMessages","addEventListener","removeEventListener","id","style","height","overflow","display","flexDirection","dataLength","length","next","hasMore","loader","scrollableTarget","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","src","photo","title","to","userId","userName","description","message","AddChatMessage","readyStatus","setReadyStatus","openHandler","console","log","initialValues","textMessage","onSubmit","values","send","name","type","loading","disabled","ChatPage","setWsChanel","ws","closeHandler","createChanel","close","WebSocket","className","block"],"mappings":"yOAwDMA,EAA0D,SAAC,GAE1D,IADLC,EACI,EADJA,UAEA,EAAgCC,mBAA4B,IAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KAcA,OAZAC,qBAAU,WACR,IAAIC,EAAiB,SAACC,GACpB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BP,GAAY,SAACQ,GAAD,4BAAsBA,GAAtB,YAAuCJ,QAIrD,OAFS,OAATP,QAAS,IAATA,KAAWY,iBAAiB,UAAWP,GAEhC,WACI,OAATL,QAAS,IAATA,KAAWa,oBAAoB,UAAWR,MAE3C,CAACL,IAGF,qBACEc,GAAG,gBACHC,MAAO,CACLC,OAAQ,IACRC,SAAU,OACVC,QAAS,OACTC,cAAe,kBANnB,SASE,cAAC,IAAD,CACEC,WAAYlB,EAASmB,OACrBC,KAAM,aACNC,SAAS,EACTC,OAAQ,4CACRC,iBAAiB,gBALnB,SAOE,cAAC,IAAD,CACEC,WAAW,aACXC,WAAYzB,EACZ0B,WAAY,SAACC,GAAD,OACV,cAAC,IAAKC,KAAN,UACE,cAAC,IAAKA,KAAKC,KAAX,CACEC,OAAQ,cAAC,IAAD,CAAQC,IAAKJ,EAAKK,QAC1BC,MACE,cAAC,IAAD,CAASC,GAAI,YAAcP,EAAKQ,OAAhC,SACGR,EAAKS,WAGVC,YAAaV,EAAKW,oBAU5BC,EAA4D,SAAC,GAE5D,IADLzC,EACI,EADJA,UAEA,EAAsCC,oBAAkB,GAAxD,mBAAOyC,EAAP,KAAoBC,EAApB,KAaA,OAZAvC,qBAAU,WACR,IAAIwC,EAAc,WAChBC,QAAQC,IAAI,SACZH,GAAe,IAIjB,OAFS,OAAT3C,QAAS,IAATA,KAAWY,iBAAiB,OAAQgC,GAE7B,WACI,OAAT5C,QAAS,IAATA,KAAWa,oBAAoB,OAAQ+B,MAExC,CAAC5C,IAGF,8BACE,cAAC,IAAD,CACE+C,cAAe,CACbC,YAAa,IAEfC,SAAU,SAACC,GACA,OAATlD,QAAS,IAATA,KAAWmD,KAAKD,EAAOF,cAL3B,SAQE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOI,KAAK,cAAcC,KAAK,SAC/B,cAAC,IAAD,CAAcC,SAAS,EAAOC,UAAWb,EAAzC,4BASKc,UArIE,WACf,MAAiCvD,mBAA2B,MAA5D,mBAAOD,EAAP,KAAkByD,EAAlB,KA+BA,OA7BArD,qBAAU,WACR,IAAIsD,EACAC,EAAe,WACjBd,QAAQC,IAAI,SACZc,KAGIA,EAAe,WAAO,IAAD,IACvB,QAAF,EAAAF,SAAA,SAAI7C,oBAAoB,QAAS8C,GAC/B,QAAF,EAAAD,SAAA,SAAIG,QAEJH,EAAK,IAAII,UACP,gEAEFjB,QAAQC,IAAI,aAEZY,EAAG9C,iBAAiB,QAAS+C,GAE7BF,EAAYC,IAKd,OAFAE,IAEO,WACLF,EAAG7C,oBAAoB,QAAS8C,GAChCD,EAAGG,WAEJ,IAGD,sBAAKE,UAAWhD,IAAMiD,MAAtB,UACE,cAACjE,EAAD,CAAcC,UAAWA,IACzB,cAACyC,EAAD,CAAgBzC,UAAWA","file":"static/js/9.ae5d6ae6.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport style from \"../../Style.module.css\";\nimport s from \"./ChatPage.module.css\";\nimport { List, Avatar } from \"antd\";\nimport { NavLink } from \"react-router-dom\";\nimport { Formik } from \"formik\";\nimport { Form, Input, SubmitButton } from \"formik-antd\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\ntype ChatMessageType = {\n  message: string;\n  photo: string;\n  userId: number;\n  userName: string;\n};\n\nconst ChatPage = () => {\n  const [wsChannel, setWsChanel] = useState<WebSocket | null>(null);\n\n  useEffect(() => {\n    let ws: WebSocket;\n    let closeHandler = () => {\n      console.log(\"close\");\n      createChanel();\n    };\n\n    const createChanel = () => {\n      ws?.removeEventListener(\"close\", closeHandler);\n      ws?.close();\n\n      ws = new WebSocket(\n        \"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\"\n      );\n      console.log(\"create ws\");\n\n      ws.addEventListener(\"close\", closeHandler);\n\n      setWsChanel(ws);\n    };\n\n    createChanel();\n\n    return () => {\n      ws.removeEventListener(\"close\", closeHandler);\n      ws.close();\n    };\n  }, []);\n\n  return (\n    <div className={style.block}>\n      <ChatMessages wsChannel={wsChannel} />\n      <AddChatMessage wsChannel={wsChannel} />\n    </div>\n  );\n};\n\nconst ChatMessages: React.FC<{ wsChannel: WebSocket | null }> = ({\n  wsChannel,\n}) => {\n  const [messages, setMessages] = useState<ChatMessageType[]>([]);\n\n  useEffect(() => {\n    let messageHandler = (e: MessageEvent) => {\n      let newMessages = JSON.parse(e.data);\n      setMessages((prevMessages) => [...prevMessages, ...newMessages]);\n    };\n    wsChannel?.addEventListener(\"message\", messageHandler);\n\n    return () => {\n      wsChannel?.removeEventListener(\"message\", messageHandler);\n    };\n  }, [wsChannel]);\n\n  return (\n    <div\n      id='scrollableDiv'\n      style={{\n        height: 300,\n        overflow: \"auto\",\n        display: \"flex\",\n        flexDirection: \"column-reverse\",\n      }}\n    >\n      <InfiniteScroll\n        dataLength={messages.length}\n        next={() => {}}\n        hasMore={false}\n        loader={<h4>Loading...</h4>}\n        scrollableTarget='scrollableDiv'\n      >\n        <List\n          itemLayout='horizontal'\n          dataSource={messages}\n          renderItem={(item) => (\n            <List.Item>\n              <List.Item.Meta\n                avatar={<Avatar src={item.photo} />}\n                title={\n                  <NavLink to={`/profile/` + item.userId}>\n                    {item.userName}\n                  </NavLink>\n                }\n                description={item.message}\n              />\n            </List.Item>\n          )}\n        />\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nconst AddChatMessage: React.FC<{ wsChannel: WebSocket | null }> = ({\n  wsChannel,\n}) => {\n  const [readyStatus, setReadyStatus] = useState<boolean>(false);\n  useEffect(() => {\n    let openHandler = () => {\n      console.log(\"ready\");\n      setReadyStatus(true);\n    };\n    wsChannel?.addEventListener(\"open\", openHandler);\n\n    return () => {\n      wsChannel?.removeEventListener(\"open\", openHandler);\n    };\n  }, [wsChannel]);\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          textMessage: \"\",\n        }}\n        onSubmit={(values) => {\n          wsChannel?.send(values.textMessage);\n        }}\n      >\n        <Form>\n          <Input name='textMessage' type='text' />\n          <SubmitButton loading={false} disabled={!readyStatus}>\n            Search\n          </SubmitButton>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"sourceRoot":""}