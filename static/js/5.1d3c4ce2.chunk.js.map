{"version":3,"sources":["utils/validators.ts","components/ProfileInfo/ProfileInfo.module.css","components/elements/Preloader.module.css","assets/images/preloaderCircle.svg","components/elements/Preloader.jsx","components/ProfileInfo/ProfileInfo.tsx","components/ProfileInfo/ProfileInfoContainer.tsx"],"names":["required","value","undefined","maxLength","max","length","module","exports","Preloader","className","s","preloader","src","alt","maxLength1000","maxLength30","ProfileControlReduxForm","reduxForm","form","handleSubmit","error","isFetching","onSubmit","profile","createField","Input","Textarea","rows","job","type","contacts","style","errorSubmitForm","sendBlock","BigButton","ProfileInfo","formData","props","setProfileInfo","render","block","blockName","initialValues","React","Component","ProfileInfoContainer","componentDidMount","miId","getUser","connect","store","getMiProfile","getMiProfileFetching","getMiId","setProfileData"],"mappings":"wGAEA,oEAAO,IAAMA,EAAgC,SAACC,GAAD,OAAYA,OAAQC,EAAY,YAEhEC,EAAY,SAACC,GAAD,OAAsC,SAACH,GAAD,OAAWA,EAAMI,OAASD,OAAMF,EAArB,kBAA4CE,EAA5C,0B,oBCH1EE,EAAOC,QAAU,CAAC,KAAO,0BAA0B,QAAU,6BAA6B,IAAM,yBAAyB,SAAW,8BAA8B,UAAY,iC,oBCA9KD,EAAOC,QAAU,CAAC,UAAY,+B,kKCDf,MAA0B,4C,yBCY1BC,EARG,WACjB,OACC,qBAAKC,UAAWC,IAAEC,UAAlB,SACC,qBAAKC,IAAKD,EAAWE,IAAI,iB,SCGtBC,EAAgBX,YAAU,KAC1BY,EAAcZ,YAAU,IAkGxBa,EAA0BC,YAG9B,CACEC,KAAM,eAJsBD,EA/E5B,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACxB,OACI,uBAAMZ,UAAWC,IAAEQ,KAAMI,SAAUH,EAAnC,UACI,sBAAKV,UAAWC,IAAEa,QAAlB,UACKC,YACG,GACA,WACA,CAACxB,IAAUe,GACXU,IACA,YACA,IAEHD,YACG,GACA,UACA,CAACxB,IAAUc,GACXY,IACA,WACA,CAAEC,KAAM,OAGhB,sBAAKlB,UAAWC,IAAEkB,IAAlB,UACKJ,YACG,GACA,iBACA,GACAC,IACA,qBACA,CAAEI,KAAM,aAEXL,YACG,GACA,4BACA,CAACxB,IAAUc,GACXY,IACA,gCACA,CAAEC,KAAM,OAGhB,sBAAKlB,UAAWC,IAAEoB,SAAlB,UACKN,YAAY,GAAI,kBAAmB,GAAIC,IAAO,SAAU,IACxDD,YAAY,GAAI,cAAe,GAAIC,IAAO,KAAM,IAChDD,YACG,GACA,oBACA,GACAC,IACA,WACA,IAEHD,YACG,GACA,qBACA,GACAC,IACA,YACA,IAEHD,YAAY,GAAI,mBAAoB,GAAIC,IAAO,UAAW,IAC1DD,YAAY,GAAI,mBAAoB,GAAIC,IAAO,UAAW,IAC1DD,YAAY,GAAI,mBAAoB,GAAIC,IAAO,UAAW,IAC1DD,YACG,GACA,oBACA,GACAC,IACA,aACA,OAGPL,GAAS,qBAAKX,UAAWsB,IAAMC,gBAAtB,SAAwCZ,IAClD,sBAAKX,UAAWC,IAAEuB,UAAlB,UACI,cAACC,EAAA,EAAD,CAAWjC,MAAM,SACjB,qBAAKQ,UAAWC,IAAEC,UAAlB,SAA8BU,GAAc,cAAC,EAAD,eAgC7Cc,E,4MAlBXb,SAAW,SAACc,GACR,EAAKC,MAAMC,eAAeF,I,EAG9BG,OAAS,WACL,OACI,sBAAK9B,UAAWsB,IAAMS,MAAtB,UACI,qBAAK/B,UAAWsB,IAAMU,UAAtB,kCACA,cAACzB,EAAD,CACIK,WAAY,EAAKgB,MAAMhB,WACvBqB,cAAe,EAAKL,MAAMd,QAC1BD,SAAU,EAAKA,e,YAZTqB,IAAMC,W,gBCrG1BC,E,4MACLC,kBAAoB,WACf,EAAKT,MAAMU,MAAM,EAAKV,MAAMW,QAAQ,EAAKX,MAAMU,O,EAEpDR,OAAS,WACR,OAAO,cAAC,EAAD,CACNhB,QAAS,EAAKc,MAAMd,QACpBe,eAAgB,EAAKD,MAAMC,eAC3BjB,WAAY,EAAKgB,MAAMhB,c,YARSsB,IAAMC,WAkB1BK,uBANS,SAACC,GAAD,MAA0B,CACjD3B,QAAS4B,YAAaD,GACtB7B,WAAY+B,YAAqBF,GACjCH,KAAMM,YAAQH,MAGyB,CAAEZ,eAAgBgB,IAAgBN,aAA3DC,CAAsEJ","file":"static/js/5.1d3c4ce2.chunk.js","sourcesContent":["export type FieldValidatorsType = (value: string) => string | undefined\n\nexport const required: FieldValidatorsType = (value) => (value ? undefined : 'Required');\n\nexport const maxLength = (max: number): FieldValidatorsType => (value) => value.length < max ? undefined : `Must be ${max} characters or less`;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileInfo_form__2rQR8\",\"profile\":\"ProfileInfo_profile__2F2QN\",\"job\":\"ProfileInfo_job__190Az\",\"contacts\":\"ProfileInfo_contacts__3GgU9\",\"preloader\":\"ProfileInfo_preloader__3l-_l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__SMTGm\"};","export default __webpack_public_path__ + \"static/media/preloaderCircle.c32a7a57.svg\";","import React from 'react';\nimport preloader from '../../assets/images/preloaderCircle.svg';\nimport s from './Preloader.module.css'\n\nconst Preloader = () => {\n\treturn (\n\t\t<div className={s.preloader}>\n\t\t\t<img src={preloader} alt='Preloader' />\n\t\t</div>\n\t)\n}\n\nexport default Preloader;","import React from 'react'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport style from '../../Style.module.css'\nimport BigButton from '../elements/BigButton'\nimport s from './ProfileInfo.module.css'\nimport { createField, Input, Textarea } from '../elements/FormsControls'\nimport Preloader from '../elements/Preloader'\nimport { maxLength, required } from '../../utils/validators'\nimport { ProfileType } from '../../type/type'\n\nconst maxLength1000 = maxLength(1000)\nconst maxLength30 = maxLength(30)\n\ntype ProfileInfoFormOunProps = {\n    isFetching: boolean\n}\n\ntype ProfileInfoType = {\n    isFetching: boolean\n    profile: ProfileType\n\n    setProfileInfo: (profile: ProfileInfoFormValuesType) => void\n}\nexport type ProfileInfoFormValuesType = ProfileType\n\ntype ProfileInfoFormValuesTypeKeys = keyof ProfileInfoFormValuesType\n\nconst ProfileInfoForm: React.FC<\n    InjectedFormProps<ProfileInfoFormValuesType, ProfileInfoFormOunProps> &\n        ProfileInfoFormOunProps\n> = ({ handleSubmit, error, isFetching }) => {\n    return (\n        <form className={s.form} onSubmit={handleSubmit}>\n            <div className={s.profile}>\n                {createField<ProfileInfoFormValuesTypeKeys>(\n                    '',\n                    'fullName',\n                    [required, maxLength30],\n                    Input,\n                    'Full name',\n                    {}\n                )}\n                {createField<ProfileInfoFormValuesTypeKeys>(\n                    '',\n                    'aboutMe',\n                    [required, maxLength1000],\n                    Textarea,\n                    'About me',\n                    { rows: 1 }\n                )}\n            </div>\n            <div className={s.job}>\n                {createField<ProfileInfoFormValuesTypeKeys>(\n                    '',\n                    'lookingForAJob',\n                    [],\n                    Input,\n                    'Looking for a job ',\n                    { type: 'checkbox' }\n                )}\n                {createField<ProfileInfoFormValuesTypeKeys>(\n                    '',\n                    'lookingForAJobDescription',\n                    [required, maxLength1000],\n                    Textarea,\n                    'Looking for a job description',\n                    { rows: 1 }\n                )}\n            </div>\n            <div className={s.contacts}>\n                {createField('', 'contacts.github', [], Input, 'GitHub', {})}\n                {createField('', 'contacts.vk', [], Input, 'VK', {})}\n                {createField(\n                    '',\n                    'contacts.facebook',\n                    [],\n                    Input,\n                    'Facebook',\n                    {}\n                )}\n                {createField(\n                    '',\n                    'contacts.instagram',\n                    [],\n                    Input,\n                    'Instagram',\n                    {}\n                )}\n                {createField('', 'contacts.twitter', [], Input, 'Twitter', {})}\n                {createField('', 'contacts.website', [], Input, 'Website', {})}\n                {createField('', 'contacts.youtube', [], Input, 'YouTube', {})}\n                {createField(\n                    '',\n                    'contacts.mainLink',\n                    [],\n                    Input,\n                    'My website',\n                    {}\n                )}\n            </div>\n            {error && <div className={style.errorSubmitForm}>{error}</div>}\n            <div className={s.sendBlock}>\n                <BigButton value=\"Save\" />\n                <div className={s.preloader}>{isFetching && <Preloader />}</div>\n            </div>\n        </form>\n    )\n}\n\nconst ProfileControlReduxForm = reduxForm<\n    ProfileInfoFormValuesType,\n    ProfileInfoFormOunProps\n>({\n    form: 'ProfileInfo',\n})(ProfileInfoForm)\n\nclass ProfileInfo extends React.Component<ProfileInfoType> {\n    onSubmit = (formData: ProfileInfoFormValuesType) => {\n        this.props.setProfileInfo(formData)\n    }\n\n    render = () => {\n        return (\n            <div className={style.block}>\n                <div className={style.blockName}>Personal Information</div>\n                <ProfileControlReduxForm\n                    isFetching={this.props.isFetching}\n                    initialValues={this.props.profile}\n                    onSubmit={this.onSubmit}\n                />\n            </div>\n        )\n    }\n}\n\nexport default ProfileInfo\n","import React from 'react';\nimport { setProfileData, getUser } from '../../redux/ProfileReducer';\nimport { connect } from 'react-redux';\nimport ProfileInfo, { ProfileInfoFormValuesType } from './ProfileInfo';\nimport { getMiId, getMiProfile } from '../../redux/authSelector';\nimport { getMiProfileFetching } from '../../redux/profileSelector';\nimport { AppStateType } from '../../redux/ReduxStore';\n\n\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchToPropsType = {\n\tsetProfileInfo: (profileData: ProfileInfoFormValuesType) => void\n\tgetUser: (userId: number) => void\n}\n\nclass ProfileInfoContainer extends React.Component<MapStateToPropsType & MapDispatchToPropsType> {\n\tcomponentDidMount = () => {\n\t\tif (this.props.miId) this.props.getUser(this.props.miId)\n\t}\n\trender = () => {\n\t\treturn <ProfileInfo\n\t\t\tprofile={this.props.profile}\n\t\t\tsetProfileInfo={this.props.setProfileInfo}\n\t\t\tisFetching={this.props.isFetching} />\n\t}\n}\n\nconst mapStateToProps = (store: AppStateType) => ({\n\tprofile: getMiProfile(store),\n\tisFetching: getMiProfileFetching(store),\n\tmiId: getMiId(store)\n})\n\nexport default connect(mapStateToProps, { setProfileInfo: setProfileData, getUser })(ProfileInfoContainer);"],"sourceRoot":""}