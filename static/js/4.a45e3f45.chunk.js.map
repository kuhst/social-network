{"version":3,"sources":["components/elements/BigButton.tsx","components/elements/BigButton.module.css","components/elements/FormsControls.tsx","components/elements/FormsControls.module.css","utils/validators.ts","components/ProfileInfo/ProfileInfo.module.css","components/elements/Preloader.module.css","assets/images/preloaderCircle.svg","components/elements/Preloader.jsx","components/ProfileInfo/ProfileInfo.tsx","components/ProfileInfo/ProfileInfoContainer.tsx"],"names":["BigButton","value","click","disabled","className","s","button","cancel","onClick","module","exports","Element","meta","input","props","hasErr","touched","error","inputContainer","description","errorMessage","Input","Textarea","createField","placeholder","name","validators","component","validate","required","undefined","maxLength","max","length","Preloader","preloader","src","alt","maxLength1000","maxLength30","ProfileControlReduxForm","reduxForm","form","handleSubmit","isFetching","onSubmit","profile","rows","job","type","contacts","style","errorSubmitForm","sendBlock","ProfileInfo","formData","setProfileInfo","render","block","blockName","initialValues","React","Component","ProfileInfoContainer","componentDidMount","miId","getUser","connect","store","getMiProfile","getMiProfileFetching","getMiId","setProfileData"],"mappings":"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","file":"static/js/4.a45e3f45.chunk.js","sourcesContent":["import React from 'react'\nimport s from './BigButton.module.css'\n\ntype PropsType = {\n\tvalue: string\n\tdisabled?: boolean\n\n\tclick?: () => void\n}\n\nconst BigButton: React.FC<PropsType> = ({ value, click, disabled }) => {\n\treturn (\n\t\t<div>\n\t\t\t<button className={s.button + ' ' + (value === 'Cancel' ? s.cancel : '')} onClick={click} disabled={disabled}>\n\t\t\t\t{value}\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default BigButton\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"BigButton_button__17-al\",\"cancel\":\"BigButton_cancel__1eqgI\"};","import React from 'react'\nimport { Field, WrappedFieldMetaProps } from 'redux-form'\nimport { FieldValidatorsType } from '../../utils/validators'\nimport s from './FormsControls.module.css'\n\ntype FormControlPropsType = {\n\tmeta: WrappedFieldMetaProps\n\tdescription?: string\n\tinput: any\n\tchildren?: React.ReactNode\n}\n\nconst Element =\n\t(Element: string): React.FC<FormControlPropsType> =>\n\t({ meta, input, ...props }) => {\n\t\tconst hasErr = meta.touched && meta.error\n\t\treturn (\n\t\t\t<div className={s.inputContainer + ' ' + (hasErr ? s.error : '')}>\n\t\t\t\t<Element {...input} {...props} className={s.input} />\n\t\t\t\t{props.description ? <span className={s.description}>{props.description}</span> : ''}\n\t\t\t\t{hasErr && <div className={s.errorMessage}>{meta.error}</div>}\n\t\t\t</div>\n\t\t)\n\t}\n\nexport const Input = Element('input')\n\nexport const Textarea = Element('textarea')\n\nexport function createField<FormKeysType extends string>(\n\tplaceholder: string | undefined,\n\tname: FormKeysType,\n\tvalidators: Array<FieldValidatorsType>,\n\tcomponent: React.FC<FormControlPropsType>,\n\tdescription = '',\n\tprops = {}\n) {\n\treturn (\n\t\t<div>\n\t\t\t<Field\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tname={name}\n\t\t\t\tvalidate={validators}\n\t\t\t\tcomponent={component}\n\t\t\t\t{...props}\n\t\t\t\tdescription={description}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default Element\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"FormsControls_inputContainer__2Ovpx\",\"input\":\"FormsControls_input__1i9a4\",\"error\":\"FormsControls_error__3oS1U\",\"errorMessage\":\"FormsControls_errorMessage__1xBnB\",\"description\":\"FormsControls_description__2znvV\"};","export type FieldValidatorsType = (value: string) => string | undefined\n\nexport const required: FieldValidatorsType = (value) => (value ? undefined : 'Required');\n\nexport const maxLength = (max: number): FieldValidatorsType => (value) => value.length < max ? undefined : `Must be ${max} characters or less`;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileInfo_form__2rQR8\",\"profile\":\"ProfileInfo_profile__2F2QN\",\"job\":\"ProfileInfo_job__190Az\",\"contacts\":\"ProfileInfo_contacts__3GgU9\",\"preloader\":\"ProfileInfo_preloader__3l-_l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__SMTGm\"};","export default __webpack_public_path__ + \"static/media/preloaderCircle.c32a7a57.svg\";","import React from 'react';\nimport preloader from '../../assets/images/preloaderCircle.svg';\nimport s from './Preloader.module.css'\n\nconst Preloader = () => {\n\treturn (\n\t\t<div className={s.preloader}>\n\t\t\t<img src={preloader} alt='Preloader' />\n\t\t</div>\n\t)\n}\n\nexport default Preloader;","import React from 'react'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport style from '../../Style.module.css'\nimport BigButton from '../elements/BigButton'\nimport s from './ProfileInfo.module.css'\nimport { createField, Input, Textarea } from '../elements/FormsControls'\nimport Preloader from '../elements/Preloader'\nimport { maxLength, required } from '../../utils/validators'\nimport { ProfileType } from '../../type/type'\n\nconst maxLength1000 = maxLength(1000)\nconst maxLength30 = maxLength(30)\n\ntype ProfileInfoFormOunProps = {\n\tisFetching: boolean\n}\n\ntype ProfileInfoType = {\n\tisFetching: boolean\n\tprofile: ProfileType\n\n\tsetProfileInfo: (profile: ProfileInfoFormValuesType) => void\n}\nexport type ProfileInfoFormValuesType = ProfileType\n\ntype ProfileInfoFormValuesTypeKeys = keyof ProfileInfoFormValuesType\n\nconst ProfileInfoForm: React.FC<\n\tInjectedFormProps<ProfileInfoFormValuesType, ProfileInfoFormOunProps> & ProfileInfoFormOunProps\n> = ({ handleSubmit, error, isFetching }) => {\n\treturn (\n\t\t<form className={s.form} onSubmit={handleSubmit}>\n\t\t\t<div className={s.profile}>\n\t\t\t\t{createField<ProfileInfoFormValuesTypeKeys>(\n\t\t\t\t\t'',\n\t\t\t\t\t'fullName',\n\t\t\t\t\t[required, maxLength30],\n\t\t\t\t\tInput,\n\t\t\t\t\t'Full name',\n\t\t\t\t\t{}\n\t\t\t\t)}\n\t\t\t\t{createField<ProfileInfoFormValuesTypeKeys>(\n\t\t\t\t\t'',\n\t\t\t\t\t'aboutMe',\n\t\t\t\t\t[required, maxLength1000],\n\t\t\t\t\tTextarea,\n\t\t\t\t\t'About me',\n\t\t\t\t\t{ rows: 1 }\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div className={s.job}>\n\t\t\t\t{createField<ProfileInfoFormValuesTypeKeys>('', 'lookingForAJob', [], Input, 'Looking for a job ', {\n\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t})}\n\t\t\t\t{createField<ProfileInfoFormValuesTypeKeys>(\n\t\t\t\t\t'',\n\t\t\t\t\t'lookingForAJobDescription',\n\t\t\t\t\t[required, maxLength1000],\n\t\t\t\t\tTextarea,\n\t\t\t\t\t'Looking for a job description',\n\t\t\t\t\t{ rows: 1 }\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div className={s.contacts}>\n\t\t\t\t{createField('', 'contacts.github', [], Input, 'GitHub', {})}\n\t\t\t\t{createField('', 'contacts.vk', [], Input, 'VK', {})}\n\t\t\t\t{createField('', 'contacts.facebook', [], Input, 'Facebook', {})}\n\t\t\t\t{createField('', 'contacts.instagram', [], Input, 'Instagram', {})}\n\t\t\t\t{createField('', 'contacts.twitter', [], Input, 'Twitter', {})}\n\t\t\t\t{createField('', 'contacts.website', [], Input, 'Website', {})}\n\t\t\t\t{createField('', 'contacts.youtube', [], Input, 'YouTube', {})}\n\t\t\t\t{createField('', 'contacts.mainLink', [], Input, 'My website', {})}\n\t\t\t</div>\n\t\t\t{error && <div className={style.errorSubmitForm}>{error}</div>}\n\t\t\t<div className={s.sendBlock}>\n\t\t\t\t<BigButton value='Save' />\n\t\t\t\t<div className={s.preloader}>{isFetching && <Preloader />}</div>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nconst ProfileControlReduxForm = reduxForm<ProfileInfoFormValuesType, ProfileInfoFormOunProps>({\n\tform: 'ProfileInfo',\n})(ProfileInfoForm)\n\nclass ProfileInfo extends React.Component<ProfileInfoType> {\n\tonSubmit = (formData: ProfileInfoFormValuesType) => {\n\t\tthis.props.setProfileInfo(formData)\n\t}\n\n\trender = () => {\n\t\treturn (\n\t\t\t<div className={style.block}>\n\t\t\t\t<div className={style.blockName}>Personal Information</div>\n\t\t\t\t<ProfileControlReduxForm\n\t\t\t\t\tisFetching={this.props.isFetching}\n\t\t\t\t\tinitialValues={this.props.profile}\n\t\t\t\t\tonSubmit={this.onSubmit}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ProfileInfo\n","import React from 'react'\nimport { setProfileData, getUser } from '../../redux/ProfileReducer'\nimport { connect } from 'react-redux'\nimport ProfileInfo, { ProfileInfoFormValuesType } from './ProfileInfo'\nimport { getMiId, getMiProfile } from '../../redux/authSelector'\nimport { getMiProfileFetching } from '../../redux/profileSelector'\nimport { AppStateType } from '../../redux/ReduxStore'\n\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchToPropsType = {\n\tsetProfileInfo: (profileData: ProfileInfoFormValuesType) => void\n\tgetUser: (userId: number) => void\n}\n\nclass ProfileInfoContainer extends React.Component<MapStateToPropsType & MapDispatchToPropsType> {\n\tcomponentDidMount = () => {\n\t\tif (this.props.miId) this.props.getUser(this.props.miId)\n\t}\n\trender = () => {\n\t\treturn (\n\t\t\t<ProfileInfo\n\t\t\t\tprofile={this.props.profile}\n\t\t\t\tsetProfileInfo={this.props.setProfileInfo}\n\t\t\t\tisFetching={this.props.isFetching}\n\t\t\t/>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (store: AppStateType) => ({\n\tprofile: getMiProfile(store),\n\tisFetching: getMiProfileFetching(store),\n\tmiId: getMiId(store),\n})\n\nexport default connect(mapStateToProps, { setProfileInfo: setProfileData, getUser })(ProfileInfoContainer)\n"],"sourceRoot":""}