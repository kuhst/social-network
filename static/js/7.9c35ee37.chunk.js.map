{"version":3,"sources":["utils/validators.ts","components/ProfileInfo/ProfileInfo.module.css","components/elements/Preloader.module.css","assets/images/preloaderCircle.svg","components/elements/Preloader.jsx","components/ProfileInfo/ProfileInfo.tsx","components/ProfileInfo/ProfileInfoContainer.tsx"],"names":["required","value","undefined","maxLength","max","length","module","exports","Preloader","className","s","preloader","src","alt","maxLength1000","maxLength30","ProfileControlReduxForm","reduxForm","form","handleSubmit","error","isFetching","onSubmit","profile","createField","Input","Textarea","rows","job","type","contacts","style","errorSubmitForm","sendBlock","BigButton","ProfileInfo","formData","props","setProfileInfo","render","block","blockName","initialValues","React","Component","ProfileInfoContainer","componentDidMount","miId","getUser","connect","store","getMiProfile","getMiProfileFetching","getMiId","setProfileData"],"mappings":"wGAEA,oEAAO,IAAMA,EAAgC,SAACC,GAAD,OAAYA,OAAQC,EAAY,YAEhEC,EAAY,SAACC,GAAD,OAAsC,SAACH,GAAD,OAAWA,EAAMI,OAASD,OAAMF,EAArB,kBAA4CE,EAA5C,0B,oBCH1EE,EAAOC,QAAU,CAAC,KAAO,0BAA0B,QAAU,6BAA6B,IAAM,yBAAyB,SAAW,8BAA8B,UAAY,iC,oBCA9KD,EAAOC,QAAU,CAAC,UAAY,+B,kKCDf,MAA0B,4C,yBCY1BC,EARG,WACjB,OACC,qBAAKC,UAAWC,IAAEC,UAAlB,SACC,qBAAKC,IAAKD,EAAWE,IAAI,iB,SCGtBC,EAAgBX,YAAU,KAC1BY,EAAcZ,YAAU,IAoDxBa,EAA0BC,YAA8D,CAC7FC,KAAM,eADyBD,EAlCmG,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC1J,OACC,uBAAMZ,UAAWC,IAAEQ,KAAMI,SAAUH,EAAnC,UACC,sBAAKV,UAAWC,IAAEa,QAAlB,UACEC,YAA2C,GAAI,WAAY,CAACxB,IAAUe,GAAcU,IAAO,YAAa,IACxGD,YAA2C,GAAI,UAAW,CAACxB,IAAUc,GAAgBY,IAAU,WAAY,CAAEC,KAAM,OAErH,sBAAKlB,UAAWC,IAAEkB,IAAlB,UACEJ,YAA2C,GAAI,iBAAkB,GAAIC,IAAO,qBAAsB,CAAEI,KAAM,aAC1GL,YAA2C,GAAI,4BAA6B,CAACxB,IAAUc,GAAgBY,IAAU,gCAAiC,CAAEC,KAAM,OAE5J,sBAAKlB,UAAWC,IAAEoB,SAAlB,UACEN,YAAY,GAAI,kBAAmB,GAAIC,IAAO,SAAU,IACxDD,YAAY,GAAI,cAAe,GAAIC,IAAO,KAAM,IAChDD,YAAY,GAAI,oBAAqB,GAAIC,IAAO,WAAY,IAC5DD,YAAY,GAAI,qBAAsB,GAAIC,IAAO,YAAa,IAC9DD,YAAY,GAAI,mBAAoB,GAAIC,IAAO,UAAW,IAC1DD,YAAY,GAAI,mBAAoB,GAAIC,IAAO,UAAW,IAC1DD,YAAY,GAAI,mBAAoB,GAAIC,IAAO,UAAW,IAC1DD,YAAY,GAAI,oBAAqB,GAAIC,IAAO,aAAc,OAE/DL,GAAS,qBAAKX,UAAWsB,IAAMC,gBAAtB,SAAwCZ,IAClD,sBAAKX,UAAWC,IAAEuB,UAAlB,UACC,cAACC,EAAA,EAAD,CAAWjC,MAAM,SACjB,qBAAKQ,UAAWC,IAAEC,UAAlB,SACEU,GAAc,cAAC,EAAD,eA8BLc,E,4MAhBdb,SAAW,SAACc,GACX,EAAKC,MAAMC,eAAeF,I,EAG3BG,OAAS,WACR,OACC,sBAAK9B,UAAWsB,IAAMS,MAAtB,UACC,qBAAK/B,UAAWsB,IAAMU,UAAtB,kCAGA,cAACzB,EAAD,CAAyBK,WAAY,EAAKgB,MAAMhB,WAAYqB,cAAe,EAAKL,MAAMd,QAASD,SAAU,EAAKA,e,YAXxFqB,IAAMC,W,gBCpD1BC,E,4MACLC,kBAAoB,WACf,EAAKT,MAAMU,MAAM,EAAKV,MAAMW,QAAQ,EAAKX,MAAMU,O,EAEpDR,OAAS,WACR,OAAO,cAAC,EAAD,CACNhB,QAAS,EAAKc,MAAMd,QACpBe,eAAgB,EAAKD,MAAMC,eAC3BjB,WAAY,EAAKgB,MAAMhB,c,YARSsB,IAAMC,WAkB1BK,uBANS,SAACC,GAAD,MAA0B,CACjD3B,QAAS4B,YAAaD,GACtB7B,WAAY+B,YAAqBF,GACjCH,KAAMM,YAAQH,MAGyB,CAAEZ,eAAgBgB,IAAgBN,aAA3DC,CAAsEJ","file":"static/js/7.9c35ee37.chunk.js","sourcesContent":["export type FieldValidatorsType = (value: string) => string | undefined\n\nexport const required: FieldValidatorsType = (value) => (value ? undefined : 'Required');\n\nexport const maxLength = (max: number): FieldValidatorsType => (value) => value.length < max ? undefined : `Must be ${max} characters or less`;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileInfo_form__2rQR8\",\"profile\":\"ProfileInfo_profile__2F2QN\",\"job\":\"ProfileInfo_job__190Az\",\"contacts\":\"ProfileInfo_contacts__3GgU9\",\"preloader\":\"ProfileInfo_preloader__3l-_l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__SMTGm\"};","export default __webpack_public_path__ + \"static/media/preloaderCircle.c32a7a57.svg\";","import React from 'react';\nimport preloader from '../../assets/images/preloaderCircle.svg';\nimport s from './Preloader.module.css'\n\nconst Preloader = () => {\n\treturn (\n\t\t<div className={s.preloader}>\n\t\t\t<img src={preloader} alt='Preloader' />\n\t\t</div>\n\t)\n}\n\nexport default Preloader;","import React from 'react';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport style from '../../Style.module.css';\nimport BigButton from '../elements/BigButton';\nimport s from './ProfileInfo.module.css';\nimport { createField, Input, Textarea } from '../elements/FormsControls';\nimport Preloader from '../elements/Preloader';\nimport { maxLength, required } from '../../utils/validators';\nimport { PhotosType, ProfileType } from '../../type/type';\n\nconst maxLength1000 = maxLength(1000);\nconst maxLength30 = maxLength(30);\n\n\ntype ProfileInfoFormOunProps = {\n\tisFetching: boolean\n}\n\ntype ProfileInfoType = {\n\tisFetching: boolean\n\tprofile: ProfileType\n\n\tsetProfileInfo: (profile: ProfileInfoFormValuesType) => void\n}\nexport type ProfileInfoFormValuesType = ProfileType\n\ntype ProfileInfoFormValuesTypeKeys = keyof ProfileInfoFormValuesType\n\n\nconst ProfileInfoForm: React.FC<InjectedFormProps<ProfileInfoFormValuesType, ProfileInfoFormOunProps> & ProfileInfoFormOunProps> = ({ handleSubmit, error, isFetching }) => {\n\treturn (\n\t\t<form className={s.form} onSubmit={handleSubmit}>\n\t\t\t<div className={s.profile}>\n\t\t\t\t{createField<ProfileInfoFormValuesTypeKeys>('', 'fullName', [required, maxLength30], Input, 'Full name', {})}\n\t\t\t\t{createField<ProfileInfoFormValuesTypeKeys>('', 'aboutMe', [required, maxLength1000], Textarea, 'About me', { rows: 1 })}\n\t\t\t</div>\n\t\t\t<div className={s.job}>\n\t\t\t\t{createField<ProfileInfoFormValuesTypeKeys>('', 'lookingForAJob', [], Input, 'Looking for a job ', { type: 'checkbox' })}\n\t\t\t\t{createField<ProfileInfoFormValuesTypeKeys>('', 'lookingForAJobDescription', [required, maxLength1000], Textarea, 'Looking for a job description', { rows: 1 })}\n\t\t\t</div>\n\t\t\t<div className={s.contacts}>\n\t\t\t\t{createField('', 'contacts.github', [], Input, 'GitHub', {})}\n\t\t\t\t{createField('', 'contacts.vk', [], Input, 'VK', {})}\n\t\t\t\t{createField('', 'contacts.facebook', [], Input, 'Facebook', {})}\n\t\t\t\t{createField('', 'contacts.instagram', [], Input, 'Instagram', {})}\n\t\t\t\t{createField('', 'contacts.twitter', [], Input, 'Twitter', {})}\n\t\t\t\t{createField('', 'contacts.website', [], Input, 'Website', {})}\n\t\t\t\t{createField('', 'contacts.youtube', [], Input, 'YouTube', {})}\n\t\t\t\t{createField('', 'contacts.mainLink', [], Input, 'My website', {})}\n\t\t\t</div>\n\t\t\t{error && <div className={style.errorSubmitForm}>{error}</div>}\n\t\t\t<div className={s.sendBlock}>\n\t\t\t\t<BigButton value='Save' />\n\t\t\t\t<div className={s.preloader}>\n\t\t\t\t\t{isFetching && <Preloader />}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\n\n\nconst ProfileControlReduxForm = reduxForm<ProfileInfoFormValuesType, ProfileInfoFormOunProps>({\n\tform: 'ProfileInfo'\n})(ProfileInfoForm)\n\nclass ProfileInfo extends React.Component<ProfileInfoType> {\n\tonSubmit = (formData: ProfileInfoFormValuesType) => {\n\t\tthis.props.setProfileInfo(formData);\n\t}\n\n\trender = () => {\n\t\treturn (\n\t\t\t<div className={style.block}>\n\t\t\t\t<div className={style.blockName}>\n\t\t\t\t\tPersonal Information\n\t\t\t\t</div>\n\t\t\t\t<ProfileControlReduxForm isFetching={this.props.isFetching} initialValues={this.props.profile} onSubmit={this.onSubmit} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ProfileInfo;","import React from 'react';\nimport { setProfileData, getUser } from '../../redux/ProfileReducer';\nimport { connect } from 'react-redux';\nimport ProfileInfo, { ProfileInfoFormValuesType } from './ProfileInfo';\nimport { getMiId, getMiProfile } from '../../redux/authSelector';\nimport { getMiProfileFetching } from '../../redux/profileSelector';\nimport { AppStateType } from '../../redux/ReduxStore';\n\n\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchToPropsType = {\n\tsetProfileInfo: (profileData: ProfileInfoFormValuesType) => void\n\tgetUser: (userId: number) => void\n}\n\nclass ProfileInfoContainer extends React.Component<MapStateToPropsType & MapDispatchToPropsType> {\n\tcomponentDidMount = () => {\n\t\tif (this.props.miId) this.props.getUser(this.props.miId)\n\t}\n\trender = () => {\n\t\treturn <ProfileInfo\n\t\t\tprofile={this.props.profile}\n\t\t\tsetProfileInfo={this.props.setProfileInfo}\n\t\t\tisFetching={this.props.isFetching} />\n\t}\n}\n\nconst mapStateToProps = (store: AppStateType) => ({\n\tprofile: getMiProfile(store),\n\tisFetching: getMiProfileFetching(store),\n\tmiId: getMiId(store)\n})\n\nexport default connect(mapStateToProps, { setProfileInfo: setProfileData, getUser })(ProfileInfoContainer);"],"sourceRoot":""}